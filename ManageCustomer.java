
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ACLC PC17
 */
public class ManageCustomer extends javax.swing.JFrame {

    /**
     * Creates new form ManageCustomer
     */
    private int customerPk = 0;
    private String currentUserRole;
    private String currentUserName;

    public ManageCustomer() {
        initComponents();
        setLocationRelativeTo(null);
        refresh();
        DefaultTableModel model = (DefaultTableModel) tableCustomer.getModel();
        tableCustomer.setModel(new DefaultTableModel(model.getDataVector(), getColumnNames(model)) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
    }

    private Vector<String> getColumnNames(DefaultTableModel model) {
        Vector<String> columnNames = new Vector<>();
        for (int i = 0; i < model.getColumnCount(); i++) {
            columnNames.add(model.getColumnName(i));
        }
        return columnNames;
    }

    private void refresh() {
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tableCustomer.getModel();
        model.setRowCount(0); // Clear the table

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");

            String query = "SELECT * FROM customer";
            ps = con.prepareStatement(query);
            rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("customer_pk"), // Ensure column names match database
                    rs.getString("name"),
                    rs.getString("email"),
                    rs.getString("number")
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Failed to refresh customer list: " + e.getMessage());
        }
    }

    public ManageCustomer(String role, String names) {
        this.currentUserRole = role;
        this.currentUserName = names;
        initComponents();
        setLocationRelativeTo(null);
        currentUserRole = role;
        refresh();  // Refresh data when the form is initialized
    }

    Connection con;
    PreparedStatement ps;
    ResultSet rs;

    private boolean validateFields() {
        if (!name.getText().equals("") && !email.getText().equals("") && !number.getText().equals("")) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCustomer = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        number = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        update = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        close = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        searchbar = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        bg5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(941, 521));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel3.setBackground(new java.awt.Color(41, 88, 82));
        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 90, 10, 430);

        jPanel4.setBackground(new java.awt.Color(41, 88, 82));
        getContentPane().add(jPanel4);
        jPanel4.setBounds(0, 510, 940, 10);

        jPanel5.setBackground(new java.awt.Color(41, 88, 82));
        getContentPane().add(jPanel5);
        jPanel5.setBounds(930, 0, 10, 520);

        jPanel1.setBackground(new java.awt.Color(41, 88, 82));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(96, 141, 100));
        jLabel6.setText("-----------------------------------------------------------------");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 940, 30));

        jLabel1.setBackground(new java.awt.Color(41, 88, 82));
        jLabel1.setFont(new java.awt.Font("Impact", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(254, 254, 254));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Customer");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 940, 50));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(96, 141, 100));
        jLabel7.setText("-----------------------------------------------------------------");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 940, 30));

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 940, 90);

        tableCustomer.setBackground(new java.awt.Color(254, 254, 254));
        tableCustomer.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tableCustomer.setForeground(new java.awt.Color(41, 88, 82));
        tableCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Email", "Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCustomerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableCustomer);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(40, 110, 410, 370);

        jLabel2.setFont(new java.awt.Font("Javanese Text", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 29, 29));
        jLabel2.setText("NAME:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(480, 180, 90, 33);

        name.setBackground(new java.awt.Color(254, 254, 254));
        name.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(41, 88, 82), 2, true));
        name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameKeyTyped(evt);
            }
        });
        getContentPane().add(name);
        name.setBounds(480, 210, 420, 40);

        jLabel3.setFont(new java.awt.Font("Javanese Text", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 29, 29));
        jLabel3.setText("EMAIL:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(480, 260, 90, 30);

        email.setBackground(new java.awt.Color(254, 254, 254));
        email.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(41, 88, 82), 2, true));
        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });
        getContentPane().add(email);
        email.setBounds(480, 290, 420, 40);

        jLabel4.setFont(new java.awt.Font("Javanese Text", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 29, 29));
        jLabel4.setText("NUMBER:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(480, 340, 130, 30);

        number.setBackground(new java.awt.Color(254, 254, 254));
        number.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(41, 88, 82), 2, true));
        number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberActionPerformed(evt);
            }
        });
        number.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberKeyTyped(evt);
            }
        });
        getContentPane().add(number);
        number.setBounds(480, 370, 420, 40);

        save.setBackground(new java.awt.Color(0, 29, 29));
        save.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        save.setForeground(new java.awt.Color(254, 254, 254));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        getContentPane().add(save);
        save.setBounds(480, 430, 80, 40);

        update.setBackground(new java.awt.Color(0, 29, 29));
        update.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        update.setForeground(new java.awt.Color(254, 254, 254));
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        getContentPane().add(update);
        update.setBounds(600, 430, 80, 40);

        refresh.setBackground(new java.awt.Color(0, 29, 29));
        refresh.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        refresh.setForeground(new java.awt.Color(254, 254, 254));
        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        getContentPane().add(refresh);
        refresh.setBounds(710, 430, 79, 40);

        close.setBackground(new java.awt.Color(0, 29, 29));
        close.setFont(new java.awt.Font("Impact", 0, 14)); // NOI18N
        close.setForeground(new java.awt.Color(254, 254, 254));
        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        getContentPane().add(close);
        close.setBounds(830, 430, 70, 40);

        jPanel6.setBackground(new java.awt.Color(41, 88, 82));
        getContentPane().add(jPanel6);
        jPanel6.setBounds(920, 500, 20, 20);

        jPanel7.setBackground(new java.awt.Color(41, 88, 82));
        getContentPane().add(jPanel7);
        jPanel7.setBounds(0, 500, 20, 20);

        jPanel2.setBackground(new java.awt.Color(163, 198, 134));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchbar.setBackground(new java.awt.Color(254, 254, 254));
        searchbar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(41, 88, 82), 2, true));
        searchbar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbarActionPerformed(evt);
            }
        });
        searchbar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchbarKeyTyped(evt);
            }
        });
        jPanel2.add(searchbar, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 40, 380, 30));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/magnifying-glass.png"))); // NOI18N
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 40, 40, 30));

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 90, 940, 430);

        bg5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/sa.png"))); // NOI18N
        bg5.setMaximumSize(new java.awt.Dimension(960, 540));
        bg5.setMinimumSize(new java.awt.Dimension(960, 540));
        bg5.setPreferredSize(new java.awt.Dimension(960, 540));
        getContentPane().add(bg5);
        bg5.setBounds(0, 0, 940, 520);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        /*DefaultTableModel model = (DefaultTableModel) tableCustomer.getModel();
        
        try {
        
        Class.forName("com.mysql.cj.jdbc.Driver");
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");
        
        ps.executeQuery("Select * from customer");
        while (rs.next()) {
        model.addRow(new Object[]{rs.getString("customer_pk"), rs.getString("name")});
        }
        } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
        }*/


    }//GEN-LAST:event_formComponentShown

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        String names = name.getText();
        String emails = email.getText();
        String numbers = number.getText();

        // Check if fields are empty
        if (validateFields()) {
            JOptionPane.showMessageDialog(null, "All fields are required.");
            return;
        }

        // Validate email
        if (!emails.contains("@gmail.com")) {
            JOptionPane.showMessageDialog(null, "Email must be a valid @gmail.com address.");
            return;
        }

        try {
            // MySQL Connector
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");

            // Check if customer already exists
            ps = con.prepareStatement(
                    "SELECT * FROM customer WHERE name = ? AND email = ? AND number = ?"
            );
            ps.setString(1, names);
            ps.setString(2, emails);
            ps.setString(3, numbers);

            rs = ps.executeQuery();
            if (rs.next()) {
                JOptionPane.showMessageDialog(null, "Customer already exists.");
                return;
            }

            // Insert new customer if not found
            ps = con.prepareStatement(
                    "INSERT INTO customer (name, email, number) VALUES (?, ?, ?)",
                    Statement.RETURN_GENERATED_KEYS
            );
            ps.setString(1, names);
            ps.setString(2, emails);
            ps.setString(3, numbers);

            // Execute the insert
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Customer Added Successfully!");

            ResultSet rsGenerated = ps.getGeneratedKeys();
            if (rsGenerated.next()) {
                int newCustomerID = rsGenerated.getInt(1);

                DefaultTableModel model = (DefaultTableModel) tableCustomer.getModel();
                model.addRow(new Object[]{
                    newCustomerID,
                    names,
                    emails,
                    numbers
                });
            }
            setVisible(true);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

        // Debugging output
        System.out.println("Name field: " + (name != null ? name.getText() : "Empty"));
        System.out.println("Email field: " + (email != null ? email.getText() : "Empty"));
        System.out.println("Number field: " + (number != null ? number.getText() : "Empty"));

    }//GEN-LAST:event_saveActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // Check if a row is selected
        int selectedRow = tableCustomer.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a customer to update.");
            return;
        }

        // Retrieve current customer details from the table
        String customerId = tableCustomer.getValueAt(selectedRow, 0).toString(); // Use 'customer_pk'
        String currentName = tableCustomer.getValueAt(selectedRow, 1).toString();
        String currentEmail = tableCustomer.getValueAt(selectedRow, 2).toString();
        String currentNumber = tableCustomer.getValueAt(selectedRow, 3).toString();

        // Retrieve new customer details from input fields
        String names = name.getText();
        String emails = email.getText();
        String numbers = number.getText();

        // Validate fields
        if (validateFields()) {
            JOptionPane.showMessageDialog(null, "All fields are required.");
            return;
        }

        // Validate email format
        if (!emails.endsWith("@gmail.com")) {
            JOptionPane.showMessageDialog(null, "Please enter a valid email ending with '@gmail.com'");
            return;
        }

        // Check if any field has changed
        if (names.equals(currentName) && emails.equals(currentEmail) && numbers.equals(currentNumber)) {
            JOptionPane.showMessageDialog(null, "No changes detected. Please modify at least one field to update.");
            return;
        }

        try {
            // Establish database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");

            // Prepare the update query
            ps = con.prepareStatement(
                    "UPDATE customer SET name = ?, email = ?, number = ? WHERE customer_pk = ?"
            );
            ps.setString(1, names);
            ps.setString(2, emails);
            ps.setString(3, numbers);
            ps.setString(4, customerId);

            // Execute the update
            int rowsUpdated = ps.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(null, "Customer updated successfully!");

                // Update the table with new values
                tableCustomer.setValueAt(names, selectedRow, 1);
                tableCustomer.setValueAt(emails, selectedRow, 2);
                tableCustomer.setValueAt(numbers, selectedRow, 3);
            } else {
                JOptionPane.showMessageDialog(null, "Customer update failed.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_updateActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        // TODO add your handling code here:
/*int a = JOptionPane.showConfirmDialog(null, "Do you want to close the app?", "Select", JOptionPane.YES_NO_OPTION);
if (a == 0) {
this.dispose();
if (currentUserRole != null) {
new Home(currentUserRole).setVisible(true);
} else {
// Handle the case where currentUserRole is null (e.g., show an error message)
JOptionPane.showMessageDialog(this, "Error: User  role is not defined.");
}*/
        int a = JOptionPane.showConfirmDialog(null, "Do you want to close the app?", "Select", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            this.dispose();
            if (currentUserRole != null) {
                new Home(currentUserRole, currentUserName).setVisible(true); // Pass the role to Home
            } else {
                // Redirect to a safe default page (e.g., login or home without role)
                JOptionPane.showMessageDialog(this, "User role is not defined. Redirecting to default home.");
                new Home().setVisible(true); // Adjust for a no-role constructor
            }
        }
    }//GEN-LAST:event_closeActionPerformed

    private void numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numberActionPerformed

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_emailActionPerformed

    private void numberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberKeyTyped
        String currentText = number.getText();
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {
            evt.consume();
        }

        if (currentText.length() == 0 && c != '0') {
            evt.consume();
            return;
        }
        if (currentText.length() == 1 && currentText.charAt(0) == '0' && c != '9') {
            evt.consume();
            return;
        }
        if (currentText.length() >= 11) {
            evt.consume();
        }
    }//GEN-LAST:event_numberKeyTyped

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tableCustomer.getModel();
        model.setRowCount(0); // Clear the table

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");

            String query = "SELECT * FROM customer";
            ps = con.prepareStatement(query);
            rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("customer_pk"), // Ensure column names match database
                    rs.getString("name"),
                    rs.getString("email"),
                    rs.getString("number")
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Failed to refresh customer list: " + e.getMessage());
        }
    }//GEN-LAST:event_refreshActionPerformed

    private void tableCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCustomerMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) { // Single click
            int selectedRow = tableCustomer.getSelectedRow();
            if (selectedRow != -1) {
                // Get data from the selected row
                String id = tableCustomer.getValueAt(selectedRow, 0).toString(); // ID column
                String names = tableCustomer.getValueAt(selectedRow, 1).toString();
                String emails = tableCustomer.getValueAt(selectedRow, 2).toString(); // Email column
                String numbers = tableCustomer.getValueAt(selectedRow, 3).toString(); // Number column

                // Retrieve password and role from the database
                try {
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");

                    // Query to fetch password and role based on ID
                    String query = "SELECT password, userrole FROM inventorymanagementsystem WHERE appuser_pk = ?";
                    ps = con.prepareStatement(query);
                    ps.setString(1, id);
                    rs = ps.executeQuery();

                } catch (ClassNotFoundException | SQLException e) {
                    JOptionPane.showMessageDialog(null, "Error fetching user details: " + e.getMessage());
                }

                // Set data to the text fields
                name.setText(names);
                email.setText(emails);
                number.setText(numbers);

            }
        }
    }//GEN-LAST:event_tableCustomerMouseClicked

    private void searchbarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tableCustomer.getModel();
        model.setRowCount(0);

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");

            ResultSet rs = ps.executeQuery();

            // Loop through the result set and add each product to the table
            while (rs.next()) {
                String id = rs.getString("customer_pk");
                String named = rs.getString("name");
                String emaild = rs.getString("email");
                String numberd = rs.getString("number");

                // Add row to the table
                model.addRow(new Object[]{id, name, email, number});
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Failed to search products: " + e.getMessage());
        }
    }//GEN-LAST:event_searchbarActionPerformed

    private void searchbarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchbarKeyTyped
        // TODO add your handling code here:
        try {
            // Mysql Connector
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventorymanagement", "root", "");
            String query = "SELECT * FROM customer WHERE customer_pk LIKE ? OR name LIKE ? OR email LIKE ? OR number LIKE ? ";

            ps = con.prepareStatement(query);
            String searchText = "%" + searchbar.getText() + "%";

            ps.setString(1, searchText);
            ps.setString(2, searchText);
            ps.setString(3, searchText);
            ps.setString(4, searchText);

            rs = ps.executeQuery();
            DefaultTableModel dt = (DefaultTableModel) tableCustomer.getModel();
            dt.setRowCount(0);

            while (rs.next()) {
                dt.addRow(new Object[]{
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4)
                });
            }

        } catch (SQLException ex) {
            Logger.getLogger(ManageCustomer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageCustomer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchbarKeyTyped

    private void nameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyTyped
        char c = evt.getKeyChar();

        // Only allow letters and space
        // If the character is NOT a letter AND is NOT a space, consume the event
        if (!Character.isLetter(c) && c != ' ') {
            evt.consume();
        }
    }//GEN-LAST:event_nameKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageCustomer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageCustomer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bg5;
    private javax.swing.JButton close;
    private javax.swing.JTextField email;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField name;
    private javax.swing.JTextField number;
    private javax.swing.JButton refresh;
    private javax.swing.JButton save;
    private javax.swing.JTextField searchbar;
    private javax.swing.JTable tableCustomer;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
